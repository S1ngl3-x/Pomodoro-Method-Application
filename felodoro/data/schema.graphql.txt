input _idOperatorsFilterCountdownInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterFindOneCountdownInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterReportInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterTaskInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterUpdateOneCountdownInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterUserInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

type Countdown {
  timeTotal: CountdownTimeTotal
  timeCurrent: CountdownTimeTotal
  selected: Boolean
  running: Boolean
  type: EnumCountdownType
  date: Date
  ownerId: MongoID
  _id: MongoID!
}

type CountdownTimeTotal {
  minutes: Float
  seconds: Float
  _id: MongoID
}

input CountdownTimeTotalInput {
  minutes: Float
  seconds: Float
  _id: MongoID
}

input CreateOneCountdownInput {
  timeTotal: CountdownTimeTotalInput!
  timeCurrent: CountdownTimeTotalInput!
  selected: Boolean
  running: Boolean
  type: EnumCountdownType!
  date: Date
  ownerId: MongoID!
}

type CreateOneCountdownPayload {
  """Created document ID"""
  recordId: MongoID

  """Created document"""
  record: Countdown
}

input CreateOneReportInput {
  name: String!
  values: [Float]!
  data: JSON!
  icon: String
  date: Date
  ownerId: MongoID!
}

type CreateOneReportPayload {
  """Created document ID"""
  recordId: MongoID

  """Created document"""
  record: Report
}

input CreateOneTaskInput {
  name: String!
  pomodorosEstimated: Float
  selected: Boolean
  status: EnumTaskStatus
  dateCreated: Date
  dateAssigned: Date
  dateFinished: Date
  ownerId: MongoID!
}

type CreateOneTaskPayload {
  """Created document ID"""
  recordId: MongoID

  """Created document"""
  record: Task
}

input CreateOneUserInput {
  email: String!
  password: String!
  date: Date
  pomodoroTime: Float
  breakTime: Float
  bigBreakTime: Float
  validationDate: Date
}

type CreateOneUserPayload {
  """Created document ID"""
  recordId: MongoID

  """Created document"""
  record: User
}

scalar Date

input DateAssignedOperatorsFilterTaskInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
}

input DateOperatorsFilterCountdownInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
}

input DateOperatorsFilterFindOneCountdownInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
}

input DateOperatorsFilterReportInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
}

input DateOperatorsFilterUpdateOneCountdownInput {
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  ne: Date
  in: [Date]
  nin: [Date]
}

input EmailOperatorsFilterUserInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

enum EnumCountdownType {
  POMODORO
  BREAK
}

enum EnumTaskStatus {
  NEW
  COMPLETED
  CLOSED
  POSTPONED
}

input FilterCountdownInput {
  timeTotal: CountdownTimeTotalInput
  timeCurrent: CountdownTimeTotalInput
  selected: Boolean
  running: Boolean
  type: EnumCountdownType
  date: Date
  ownerId: MongoID
  _id: MongoID
  _ids: [MongoID]

  """List of *indexed* fields that can be filtered via operators."""
  _operators: OperatorsFilterCountdownInput
  OR: [FilterCountdownInput!]
  AND: [FilterCountdownInput!]
}

input FilterFindManyReportInput {
  ownerId: MongoID!
}

input FilterFindManyTaskInput {
  ownerId: MongoID!
  status: String
}

input FilterFindOneCountdownInput {
  timeTotal: CountdownTimeTotalInput
  timeCurrent: CountdownTimeTotalInput
  selected: Boolean
  running: Boolean
  type: EnumCountdownType
  date: Date
  ownerId: MongoID
  _id: MongoID
  _ids: [MongoID]

  """List of *indexed* fields that can be filtered via operators."""
  _operators: OperatorsFilterFindOneCountdownInput
  OR: [FilterFindOneCountdownInput!]
  AND: [FilterFindOneCountdownInput!]
}

input FilterReportInput {
  name: String
  values: [Float]
  data: JSON
  icon: String
  date: Date
  ownerId: MongoID
  _id: MongoID
  _ids: [MongoID]

  """List of *indexed* fields that can be filtered via operators."""
  _operators: OperatorsFilterReportInput
  OR: [FilterReportInput!]
  AND: [FilterReportInput!]
}

input FilterTaskInput {
  name: String
  pomodorosEstimated: Float
  selected: Boolean
  status: EnumTaskStatus
  dateCreated: Date
  dateAssigned: Date
  dateFinished: Date
  ownerId: MongoID
  _id: MongoID
  _ids: [MongoID]

  """List of *indexed* fields that can be filtered via operators."""
  _operators: OperatorsFilterTaskInput
  OR: [FilterTaskInput!]
  AND: [FilterTaskInput!]
}

input FilterUpdateOneCountdownInput {
  timeTotal: CountdownTimeTotalInput
  timeCurrent: CountdownTimeTotalInput
  selected: Boolean
  running: Boolean
  type: EnumCountdownType
  date: Date
  ownerId: MongoID
  _id: MongoID
  _ids: [MongoID]

  """List of *indexed* fields that can be filtered via operators."""
  _operators: OperatorsFilterUpdateOneCountdownInput
  OR: [FilterUpdateOneCountdownInput!]
  AND: [FilterUpdateOneCountdownInput!]
}

input FilterUserInput {
  email: String
  password: String
  date: Date
  pomodoroTime: Float
  breakTime: Float
  bigBreakTime: Float
  validationDate: Date
  _id: MongoID
  _ids: [MongoID]

  """List of *indexed* fields that can be filtered via operators."""
  _operators: OperatorsFilterUserInput
  OR: [FilterUserInput!]
  AND: [FilterUserInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LoginInput {
  email: String!
  password: String!
}

"""
The `ID` scalar type represents a unique MongoDB identifier in collection.
MongoDB by default use 12-byte ObjectId value
(https://docs.mongodb.com/manual/reference/bson-types/#objectid). But MongoDB
also may accepts string or integer as correct values for _id field.
"""
scalar MongoID

type Mutation {
  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  reportCreateOne(record: CreateOneReportInput!): CreateOneReportPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  taskCreateOne(record: CreateOneTaskInput!): CreateOneTaskPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to
  mongoose document. 3) Mongoose applies defaults, setters, hooks and
  validation. 4) And save it.
  """
  taskUpdateById(record: UpdateByIdTaskInput!): UpdateByIdTaskPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to
  mongoose document. 3) Mongoose applies defaults, setters, hooks and
  validation. 4) And save it.
  """
  taskUpdateByIdNoSub(record: UpdateByIdTaskInput!): UpdateByIdTaskPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  userCreateOne(record: CreateOneUserInput!): CreateOneUserPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to
  mongoose document. 3) Mongoose applies defaults, setters, hooks and
  validation. 4) And save it.
  """
  userUpdateById(record: UpdateByIdUserInput!): UpdateByIdUserPayload

  """
  Create one document with mongoose defaults, setters, hooks and validation
  """
  countdownCreateOne(record: CreateOneCountdownInput!): CreateOneCountdownPayload

  """
  Update one document: 1) Retrieve one document by findById. 2) Apply updates to
  mongoose document. 3) Mongoose applies defaults, setters, hooks and
  validation. 4) And save it.
  """
  countdownUpdateById(record: UpdateByIdCountdownInput!): UpdateByIdCountdownPayload

  """
  Update one document: 1) Retrieve one document via findOne. 2) Apply updates to
  mongoose document. 3) Mongoose applies defaults, setters, hooks and
  validation. 4) And save it.
  """
  countdownUpdateOne(
    record: UpdateOneCountdownInput!

    """Filter by fields"""
    filter: FilterUpdateOneCountdownInput
    sort: SortUpdateOneCountdownInput
    skip: Int
  ): UpdateOneCountdownPayload
}

"""For performance reason this type contains only *indexed* fields."""
input OperatorsFilterCountdownInput {
  date: DateOperatorsFilterCountdownInput
  _id: _idOperatorsFilterCountdownInput
}

"""For performance reason this type contains only *indexed* fields."""
input OperatorsFilterFindOneCountdownInput {
  date: DateOperatorsFilterFindOneCountdownInput
  _id: _idOperatorsFilterFindOneCountdownInput
}

"""For performance reason this type contains only *indexed* fields."""
input OperatorsFilterReportInput {
  date: DateOperatorsFilterReportInput
  _id: _idOperatorsFilterReportInput
}

"""For performance reason this type contains only *indexed* fields."""
input OperatorsFilterTaskInput {
  dateAssigned: DateAssignedOperatorsFilterTaskInput
  _id: _idOperatorsFilterTaskInput
}

"""For performance reason this type contains only *indexed* fields."""
input OperatorsFilterUpdateOneCountdownInput {
  date: DateOperatorsFilterUpdateOneCountdownInput
  _id: _idOperatorsFilterUpdateOneCountdownInput
}

"""For performance reason this type contains only *indexed* fields."""
input OperatorsFilterUserInput {
  email: EmailOperatorsFilterUserInput
  _id: _idOperatorsFilterUserInput
}

type Query {
  reportMany(filter: FilterFindManyReportInput): [Report]
  reportCount(
    """Filter by fields"""
    filter: FilterReportInput
  ): Int
  taskMany(filter: FilterFindManyTaskInput): [Task]
  taskCount(
    """Filter by fields"""
    filter: FilterTaskInput
  ): Int
  userById(_id: MongoID!): User
  userCount(
    """Filter by fields"""
    filter: FilterUserInput
  ): Int
  login(user: LoginInput): User
  countdownById(_id: MongoID!): Countdown
  countdownByIds(_ids: [MongoID]!, limit: Int = 1000, sort: SortFindByIdsCountdownInput): [Countdown]
  countdownCount(
    """Filter by fields"""
    filter: FilterCountdownInput
  ): Int
  countdownGetUpdate(
    """Filter by fields"""
    filter: FilterFindOneCountdownInput
    skip: Int
    sort: SortFindOneCountdownInput
  ): Countdown
}

type Report {
  name: String
  values: [Float]
  data: JSON
  icon: String
  date: Date
  ownerId: MongoID
  _id: MongoID!
}

enum SortFindByIdsCountdownInput {
  _ID_ASC
  _ID_DESC
  DATE_ASC
  DATE_DESC
}

enum SortFindManyCountdownInput {
  _ID_ASC
  _ID_DESC
  DATE_ASC
  DATE_DESC
}

enum SortFindManyReportInput {
  _ID_ASC
  _ID_DESC
  DATE_ASC
  DATE_DESC
}

enum SortFindManyTaskInput {
  _ID_ASC
  _ID_DESC
  DATEASSIGNED_ASC
  DATEASSIGNED_DESC
}

enum SortFindOneCountdownInput {
  _ID_ASC
  _ID_DESC
  DATE_ASC
  DATE_DESC
}

enum SortUpdateOneCountdownInput {
  _ID_ASC
  _ID_DESC
  DATE_ASC
  DATE_DESC
}

type Subscription {
  """Subscribe to Create Countdown"""
  countdownCreated(ownerId: MongoID): Countdown

  """Subscribe to Update Countdown"""
  countdownUpdated(ownerId: MongoID): Countdown

  """Subscribe to Countdown Get Update"""
  countdownGetUpdate(ownerId: MongoID): Countdown

  """Subscribe to Create Task"""
  taskCreated(ownerId: MongoID): Task

  """Subscribe to Update Task"""
  taskUpdated(ownerId: MongoID): Task

  """Subscribe to User Update"""
  userUpdated(email: String!): User
}

type Task {
  name: String
  pomodorosEstimated: Float
  selected: Boolean
  status: EnumTaskStatus
  dateCreated: Date
  dateAssigned: Date
  dateFinished: Date
  ownerId: MongoID
  _id: MongoID!
  countdowns(skip: Int, limit: Int = 1000, sort: SortFindManyCountdownInput): [Countdown]
  pomodorosSpent(skip: Int, limit: Int = 1000, sort: SortFindManyCountdownInput): [Countdown]
  pomodorosSpentCount: Int
}

input UpdateByIdCountdownInput {
  timeTotal: CountdownTimeTotalInput
  timeCurrent: CountdownTimeTotalInput
  selected: Boolean
  running: Boolean
  type: EnumCountdownType
  date: Date
  ownerId: MongoID
  _id: MongoID!
}

type UpdateByIdCountdownPayload {
  """Updated document ID"""
  recordId: MongoID

  """Updated document"""
  record: Countdown
}

input UpdateByIdTaskInput {
  name: String
  pomodorosEstimated: Float
  selected: Boolean
  status: EnumTaskStatus
  dateCreated: Date
  dateAssigned: Date
  dateFinished: Date
  ownerId: MongoID
  _id: MongoID!
}

type UpdateByIdTaskPayload {
  """Updated document ID"""
  recordId: MongoID

  """Updated document"""
  record: Task
}

input UpdateByIdUserInput {
  email: String
  password: String
  date: Date
  pomodoroTime: Float
  breakTime: Float
  bigBreakTime: Float
  validationDate: Date
  _id: MongoID!
}

type UpdateByIdUserPayload {
  """Updated document ID"""
  recordId: MongoID

  """Updated document"""
  record: User
}

input UpdateOneCountdownInput {
  timeTotal: CountdownTimeTotalInput
  timeCurrent: CountdownTimeTotalInput
  selected: Boolean
  running: Boolean
  type: EnumCountdownType
  date: Date
  ownerId: MongoID
}

type UpdateOneCountdownPayload {
  """Updated document ID"""
  recordId: MongoID

  """Updated document"""
  record: Countdown
}

type User {
  email: String
  password: String
  date: Date
  pomodoroTime: Float
  breakTime: Float
  bigBreakTime: Float
  validationDate: Date
  _id: MongoID!
  tasks(skip: Int, limit: Int = 1000, sort: SortFindManyTaskInput): [Task]
  reports(skip: Int, limit: Int = 1000, sort: SortFindManyReportInput): [Report]
}
